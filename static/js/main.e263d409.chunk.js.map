{"version":3,"sources":["components/Header.jsx","components/TrumpThink.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","title","React","Component","TrumpThink","className","thought","Footer","copyright","TrumpThinkUrl","App","_this","loadThought","Axios","get","then","resp","setState","data","message","catch","err","console","log","state","components_Header","components_TrumpThink","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAmBeA,qBAbX,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACTH,0EAIN,OACIO,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,UAAKN,KAAKH,MAAMU,eARXC,IAAMC,YCQZC,mLARP,OACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBACXP,EAAAC,EAAAC,cAAA,SAAIN,KAAKH,MAAMe,iBALNJ,IAAMC,WCchBI,cAbX,SAAAA,EAAYhB,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,GAAAf,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,KAAAH,KACTH,0EAIN,OACIO,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,SAAIN,KAAKH,MAAMiB,mBARVN,IAAMC,WCWrBM,EAAgB,0DA6CPC,cA1Cb,SAAAA,EAAYnB,GAAM,IAAAoB,EAAA,OAAAnB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IAChBC,EAAAnB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMH,KAQRqB,YAAc,WACZC,IAAMC,IAAIL,GACPM,KAAK,SAAAC,GACJL,EAAKM,SAAS,CACZX,QAASU,EAAKE,KAAKC,YAGtBC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GAEZV,EAAKM,SAAS,CACZX,QAAS,uFAjBfK,EAAKa,MAAQ,CACXlB,QAAS,cAJKK,oFA0BhBjB,KAAKkB,+CAIL,OACEd,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACyB,EAAD,CAAQxB,MAAM,2BAEdH,EAAAC,EAAAC,cAAC0B,EAAD,CAAapB,QAASZ,KAAK8B,MAAMlB,UAEjCR,EAAAC,EAAAC,cAAC2B,EAAD,CAAQnB,UAAU,uDArCRN,IAAMC,WCHJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.e263d409.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//CSS\r\nimport '../css/Header.css'\r\n\r\nclass Header extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <header>\r\n                <h1>{this.props.title}</h1>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass TrumpThink extends React.Component{\r\n    \r\n    render(){\r\n        return(\r\n            <div className='trumpThought'>\r\n                <p>{this.props.thought}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrumpThink;","import React from 'react';\r\n\r\nclass Footer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <footer>\r\n                <p>{this.props.copyright}</p>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","//REACT\nimport React from 'react';\nimport './css/App.css';\n\n//LIBRARIES\nimport Axios from 'axios';\n\n// COMPONENTS\nimport Header from './components/Header'\nimport TrumpThink from './components/TrumpThink';\nimport Footer from './components/Footer'\n\n//CONST VARIABLES\nconst TrumpThinkUrl = 'https://api.whatdoestrumpthink.com/api/v1/quotes/random';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      thought: 'Loading...'\n    }\n  }\n\n  //Como es una arrow function no tenemos que bindear el this\n  loadThought = () => {\n    Axios.get(TrumpThinkUrl)\n      .then(resp => {\n        this.setState({\n          thought: resp.data.message\n        });\n      })\n      .catch(err => {\n        console.log(err)\n\n        this.setState({\n          thought: '(◉ω◉)   Error accessing to brain of Trump   (◉ω◉)'\n        });\n      });\n  }\n\n  componentWillMount(){\n    this.loadThought();\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header title='What does trump think?'></Header>\n\n        <TrumpThink  thought={this.state.thought}/>\n\n        <Footer copyright='@ All rights reserved. Carlos Micó 2019'/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}